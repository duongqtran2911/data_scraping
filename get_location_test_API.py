import logging
import os
import re

from selenium.common import NoSuchElementException, ElementClickInterceptedException
from seleniumwire import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import json
import io
import gzip


log_dir = "logs_status_coordinate"
os.makedirs(log_dir, exist_ok=True)

# ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn file log
log_path = os.path.join(log_dir, "status_coordinate-1.log")

# T·∫°o logger ri√™ng cho ·ª©ng d·ª•ng
app_logger = logging.getLogger("app_logger1")
app_logger.setLevel(logging.INFO)

# ƒê·∫£m b·∫£o logger n√†y kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi c√°c logger kh√°c
app_logger.propagate = False

# Th√™m handler n·∫øu ch∆∞a c√≥
if not app_logger.handlers:
    file_handler = logging.FileHandler(log_path, mode="a", encoding="utf-8")
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(formatter)
    app_logger.addHandler(file_handler)

def setup_driver(headless=True):
    options = webdriver.ChromeOptions()
    if headless:
        options.add_argument("--headless")
    driver = webdriver.Chrome(options=options)
    driver.maximize_window()
    return driver


def open_guland_page(driver):
    driver.get("https://guland.vn/ban-do-gia")
    WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.ID, "to-thua-search")))
    time.sleep(1)  # gi·ªØ l·∫°i ch√∫t th·ªùi gian ƒë·ªÉ trang load ·ªïn ƒë·ªãnh


def fill_form(driver, so_thua, so_to, tinh, huyen, xa):
    # m·ªü l·∫°i form t·ªù th·ª≠a
    wait = WebDriverWait(driver, 5)

    # 0. Nh·∫•n m·ªü l·∫°i form "T·ªù th·ª≠a"
    try:
        to_thua_button = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="to-thua-search"]/a')))
        to_thua_button.click()
        time.sleep(1)
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ m·ªü l·∫°i form t·ªù th·ª≠a: {e}")
        return False

    # 1. X√≥a s·ªë th·ª≠a v√† s·ªë t·ªù c≈© (n·∫øu c√≥) r·ªìi nh·∫≠p m·ªõi
    input_thua = driver.find_element(By.XPATH, '//*[@id="form-to-thua"]/div[1]/div/div/div/div[2]/div/div/input[1]')
    input_to = driver.find_element(By.XPATH, '//*[@id="form-to-thua"]/div[1]/div/div/div/div[2]/div/div/input[2]')
    input_thua.clear()
    input_to.clear()
    input_thua.send_keys(so_thua)
    input_to.send_keys(so_to)

    # 2. Reset v√† ch·ªçn l·∫°i T·ªânh
    driver.find_element(By.ID, "select2-province_id_4-container").click()
    wait.until(EC.visibility_of_element_located((By.CLASS_NAME, "select2-search__field")))
    search = driver.find_element(By.CLASS_NAME, "select2-search__field")
    search.send_keys(Keys.CONTROL + "a")
    search.send_keys(Keys.BACKSPACE)
    search.send_keys(tinh)
    search.send_keys(Keys.ENTER)

    # 3. Reset v√† ch·ªçn l·∫°i Huy·ªán
    time.sleep(0.5)
    driver.find_element(By.ID, "select2-district_id_4-container").click()
    wait.until(EC.visibility_of_element_located((By.CLASS_NAME, "select2-search__field")))
    search = driver.find_element(By.CLASS_NAME, "select2-search__field")
    search.send_keys(Keys.CONTROL + "a")
    search.send_keys(Keys.BACKSPACE)
    search.send_keys(huyen)
    search.send_keys(Keys.ENTER)

    # 4. Reset v√† ch·ªçn l·∫°i X√£
    time.sleep(0.5)
    driver.find_element(By.ID, "select2-ward_id_4-container").click()
    wait.until(EC.visibility_of_element_located((By.CLASS_NAME, "select2-search__field")))
    search = driver.find_element(By.CLASS_NAME, "select2-search__field")
    search.send_keys(Keys.CONTROL + "a")
    search.send_keys(Keys.BACKSPACE)
    search.send_keys(xa)
    search.send_keys(Keys.ENTER)

    # 5. Nh·∫•n t√¨m ki·∫øm
    time.sleep(1)
    search_button = driver.find_element(By.XPATH, '//*[@id="TabContent-SqhSearch-3"]/div/div[2]/button')
    search_button.click()
    time.sleep(3)

    return True


def extract_coordinates_from_requests(driver):
    correct_url = "https://guland.vn/post/check-plan?screen=ban-do-gia"
    lat, lng = None, None
    polygon_points = []

    # Get only the most recent requests
    for request in driver.requests:
        if request.method == "POST" and correct_url in request.url and request.response:
            try:
                raw = request.response.body
                try:
                    decompressed = gzip.GzipFile(fileobj=io.BytesIO(raw)).read().decode("utf-8")
                except OSError:
                    decompressed = raw.decode("utf-8")

                response_data = json.loads(decompressed)
                lat = response_data["data"]["lat"]
                lng = response_data["data"]["lng"]

                print(f"‚úÖ Found parcel coordinates: lat = {lat}, lng = {lng}")
                app_logger.info(f"‚úÖ Found parcel coordinates: lat = {lat}, lng = {lng}")

                if "points" in response_data["data"]:
                    print("üß≠ Polygon boundary:")
                    polygon_points = response_data["data"]["points"]
                    for pt in polygon_points:
                        print(f"  {pt}")

            except Exception as e:
                print("‚ùå Failed to parse JSON:", e)
                app_logger.info("‚ùå Failed to parse JSON:", e)
            break

    if lat is None or lng is None:
        print("‚ùå Could not find coordinates.")
        app_logger.info("‚ùå Could not find coordinates.")

    return lat, lng, polygon_points


def normalize_tinh_name(tinh):
    """Chu·∫©n h√≥a t√™n t·ªânh"""
    tinh = tinh.lower().strip()
    replacements = {
        "h·ªì ch√≠ minh": "tp. h·ªì ch√≠ minh",
        "tp hcm": "tp. h·ªì ch√≠ minh",
        "tp.hcm": "tp. h·ªì ch√≠ minh",
        "tp ho chi minh": "tp. h·ªì ch√≠ minh",
        "th√†nh ph·ªë h·ªì ch√≠ minh": "tp. h·ªì ch√≠ minh",
        "ho chi minh": "tp. h·ªì ch√≠ minh",
        "hcm": "tp. h·ªì ch√≠ minh",
        ".ct" : "c·∫ßn th∆°",
        ". ct": "c·∫ßn th∆°",
        "ct" : "c·∫ßn th∆°"
    }
    return replacements.get(tinh, tinh)

# Ph√¢n t√≠ch ƒë·ªãa ch·ªâ th√†nh c√°c th√†nh ph·∫ßn: t·ªânh, huy·ªán, x√£
def parse_location_info(location):
    """Ph√¢n t√≠ch ƒë·ªãa ch·ªâ th√†nh c√°c th√†nh ph·∫ßn cho Guland"""
    so_thua = ""
    so_to = ""
    tinh = ""
    huyen = ""
    xa = ""

    if location and isinstance(location, str) and location.strip():
        parts = location.split(',')
        parts = [p.strip() for p in parts if p.strip()]

        # S·ªë th·ª≠a: "Th·ª≠a ƒë·∫•t s·ªë 104" ho·∫∑c "Th·ª≠a s·ªë 104"
        thuad_match = re.search(r"(?:[Tt]h·ª≠a (?:ƒë·∫•t )?s·ªë\s*)(\d+)", location)
        if thuad_match:
            so_thua = thuad_match.group(1)

        # S·ªë t·ªù: "T·ªù b·∫£n ƒë·ªì 06" ho·∫∑c "T·ªù b·∫£n ƒë·ªì s·ªë 06"
        tobd_match = re.search(r"[Tt]·ªù b·∫£n ƒë·ªì(?: s·ªë)?\s*(\d+)", location)
        if tobd_match:
            so_to = tobd_match.group(1)

        # T√¨m ph·∫ßn t·ªânh/th√†nh ph·ªë
        for part in parts:
            part_lower = part.lower()
            if "t·ªânh" in part_lower or "th√†nh ph·ªë" in part_lower or "tp" in part_lower:
                tinh = part_lower.replace("t·ªânh", "").replace("th√†nh ph·ªë", "").replace("tp", "").strip()
                break

        # tinh = normalize_tinh_name(tinh)
        # T√¨m ph·∫ßn huy·ªán/qu·∫≠n/th·ªã x√£ (bao g·ªìm "tx" l√† vi·∫øt t·∫Øt th·ªã x√£)
        for part in parts:
            part_lower = part.lower()
            if ("huy·ªán" in part_lower or "qu·∫≠n" in part_lower or
                "th·ªã x√£" in part_lower or part_lower.startswith("tx ")):
                huyen = part_lower.replace("tx", "th·ªã x√£").strip()
                break

        # T√¨m ph·∫ßn x√£/ph∆∞·ªùng/th·ªã tr·∫•n
        for part in parts:
            part_lower = part.lower()
            if "x√£" in part_lower or "ph∆∞·ªùng" in part_lower or "th·ªã tr·∫•n" in part_lower:
                xa = part_lower.strip()
                break

        # D·ª± ph√≤ng n·∫øu v·∫´n thi·∫øu
        if not tinh and len(parts) >= 1:
            tinh = parts[-1].lower().strip()
        if not huyen and len(parts) >= 2:
            huyen = parts[-2].lower().strip()
        if not xa and len(parts) >= 3:
            xa = parts[-3].lower().strip()

    return {
        "so_thua": so_thua,
        "so_to": so_to,
        "tinh": tinh,
        "huyen": huyen,
        "xa": xa
    }


def interactive_loop(driver, address_info, file_path):
    print("D·ªØ li·ªáu ƒë√£ l·ªçc ƒë∆∞·ª£c:")
    print(address_info)

    # L·∫•y th√¥ng tin
    so_thua = address_info.get("so_thua", "").strip()
    so_to = address_info.get("so_to", "").strip()
    tinh = address_info.get("tinh", "").strip()
    huyen = address_info.get("huyen", "").strip()
    xa = address_info.get("xa", "").strip()

    print(so_thua, so_to, tinh, huyen, xa)
    # N·∫øu thi·∫øu b·∫•t k·ª≥ d·ªØ li·ªáu n√†o th√¨ b·ªè qua
    if not all([so_thua, so_to, tinh, huyen, xa]):
        print("‚ö†Ô∏è Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc (s·ªë th·ª≠a, s·ªë t·ªù, t·ªânh, huy·ªán, x√£). B·ªè qua ƒë·ªãa ch·ªâ n√†y.")
        # app_logger.info(file_path)
        app_logger.info(address_info)
        app_logger.info("‚ö†Ô∏è Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc (s·ªë th·ª≠a, s·ªë t·ªù, t·ªânh, huy·ªán, x√£). B·ªè qua ƒë·ªãa ch·ªâ n√†y.")
        app_logger.info(
            f" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n")
        return None

    try:
        # Clear existing requests before each search
        del driver.requests

        success = fill_form(driver, so_thua, so_to, tinh, huyen, xa)

        if success:
            try:
                close_button = driver.find_element("xpath", '//*[@id="Modal-Sample"]/div/div/button')
                if close_button.is_displayed():
                    print("üö´ Kh√¥ng t√¨m th·∫•y khu v·ª±c theo t·ªù th·ª≠a. ƒêang ƒë√≥ng popup...")
                    # app_logger.info(file_path)
                    app_logger.info(address_info)
                    app_logger.info("üö´ Kh√¥ng t√¨m th·∫•y khu v·ª±c theo t·ªù th·ª≠a. ƒêang ƒë√≥ng popup...")
                    app_logger.info(
                        f" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n")
                    close_button.click()
                    time.sleep(1)
                    return None  # sau khi ƒë√≥ng popup th√¨ b·ªè qua ƒë·ªãa ch·ªâ n√†y lu√¥n
            except NoSuchElementException:
                pass  # Kh√¥ng c√≥ popup, ti·∫øp t·ª•c nh∆∞ b√¨nh th∆∞·ªùng
            except ElementClickInterceptedException:
                print("‚ùå Kh√¥ng th·ªÉ click ƒë·ªÉ ƒë√≥ng popup.")
                return None

                # N·∫øu kh√¥ng c√≥ popup l·ªói, tr√≠ch xu·∫•t to·∫° ƒë·ªô
            lat, lng, points = extract_coordinates_from_requests(driver)
            # app_logger.info(file_path)
            app_logger.info(address_info)
            app_logger.info("‚úÖ L·∫•y t·ªça ƒë·ªô th√†nh c√¥ng.")
            app_logger.info(
                f" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n")
            return {
                "type": "Point",
                "coordinates": [lng, lat]
            }
        else:
            print("‚ùå Kh√¥ng th·ªÉ ƒëi·ªÅn form t√¨m ki·∫øm.")
            app_logger.info(address_info)
            app_logger.info("‚ùå Kh√¥ng th·ªÉ ƒëi·ªÅn form t√¨m ki·∫øm.")
            app_logger.info(
                f" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        # app_logger.info(file_path)
        app_logger.info(address_info)
        app_logger.info(f"‚ùå L·ªói: {e}")
        app_logger.info(
            f" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n")

    return None

def action_open_guland_driver(address, driver, file_path):
    # === Actions ===
    # driver = setup_driver(headless=True)
    try:
        # open_guland_page(driver)
        # print("‚úÖ Trang Guland ƒë√£ s·∫µn s√†ng.")

        address_parse = parse_location_info(address)

        return interactive_loop(driver,address_parse, file_path)
    except:
        print("‚ùå Fail to open Guland 2")


    # finally:
    #     driver.quit()

def main():
    action_open_guland_driver("Th·ª≠a ƒë·∫•t s·ªë 2 (pcl); 3; 193; 194, t·ªù b·∫£n ƒë·ªì s·ªë 14, ·∫•p 2/5, x√£ Long H·∫≠u, huy·ªán C·∫ßn Giu·ªôc, t·ªânh Long An"
)


if __name__ == "__main__":
    main()