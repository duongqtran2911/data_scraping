import logging
import os
import re

from selenium.common import NoSuchElementException, ElementClickInterceptedException, ElementNotInteractableException
from seleniumwire import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import json
import io
import gzip

def setup_driver_address2(headless=True):
    options = webdriver.ChromeOptions()
    if headless:
        options.add_argument("--headless")

    # C·∫•u h√¨nh selenium-wire ƒë·ªÉ capture requests t·ªët h∆°n
    seleniumwire_options = {
        'disable_encoding': True,  # T·∫Øt encoding ƒë·ªÉ d·ªÖ ƒë·ªçc response
        'suppress_connection_errors': False,
        'verify_ssl': False,
    }

    driver = webdriver.Chrome(options=options, seleniumwire_options=seleniumwire_options)
    driver.maximize_window()
    return driver


def open_guland_page_2(driver):
    driver.get("https://guland.vn")
    # T√¨m v√† nh·∫•n n√∫t sign in
    try:
        sign_in_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "/html/body/div[1]/div[2]/div/div[1]/div/div/ul/li[1]/a"))
        )
        sign_in_button.click()
        print("ƒê√£ nh·∫•n n√∫t sign in th√†nh c√¥ng")

        # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ trang sign in load
        time.sleep(2)

        login_guland(driver,"0382250988","112233445566")

    except Exception as e:
        print(f"L·ªói khi nh·∫•n n√∫t sign in: {e}")
        # C√≥ th·ªÉ th·ª≠ c√°ch kh√°c n·∫øu xpath kh√¥ng ho·∫°t ƒë·ªông
        try:
            # Th·ª≠ t√¨m b·∫±ng text link
            sign_in_link = driver.find_element(By.LINK_TEXT, "ƒêƒÉng nh·∫≠p")
            sign_in_link.click()
            print("ƒê√£ nh·∫•n n√∫t sign in b·∫±ng c√°ch kh√°c")
        except:
            print("Kh√¥ng th·ªÉ t√¨m th·∫•y n√∫t sign in")

    time.sleep(1)  # gi·ªØ l·∫°i ch√∫t th·ªùi gian ƒë·ªÉ trang load ·ªïn ƒë·ªãnh


def login_guland(driver, phone, password):
    try:
        # Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i
        phone_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "/html/body/div[1]/div[2]/div/div/div/div/div/div/div/div[2]/div/form/div[1]/input"))
        )
        phone_input.clear()
        phone_input.send_keys(phone)
        print("‚úÖ ƒê√£ nh·∫≠p s·ªë ƒëi·ªán tho·∫°i")

        # Nh·∫≠p m·∫≠t kh·∫©u
        password_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "/html/body/div[1]/div[2]/div/div/div/div/div/div/div/div[2]/div/form/div[2]/input"))
        )
        password_input.clear()
        password_input.send_keys(password)
        print("‚úÖ ƒê√£ nh·∫≠p m·∫≠t kh·∫©u")

        # Nh·∫•n n√∫t ƒëƒÉng nh·∫≠p
        login_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "/html/body/div[1]/div[2]/div/div/div/div/div/div/div/div[2]/div/form/div[4]/button"))
        )
        login_button.click()
        print("‚úÖ ƒê√£ nh·∫•n n√∫t ƒëƒÉng nh·∫≠p")

        click_price_map_button(driver)

    except Exception as e:
        print(f"‚ùå L·ªói khi ƒëƒÉng nh·∫≠p: {e}")


def click_price_map_button(driver):
    try:
        # ƒê·ª£i v√† nh·∫•n v√†o n√∫t "B·∫£n ƒë·ªì gi√° nh√† ƒë·∫•t"
        price_map_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "/html/body/div[1]/div[3]/div/div[1]/div/div/ul/li[6]/a"))
        )
        price_map_button.click()
        print("‚úÖ ƒê√£ nh·∫•n v√†o n√∫t 'B·∫£n ƒë·ªì gi√° nh√† ƒë·∫•t'")

    except Exception as e:
        print(f"‚ùå L·ªói khi nh·∫•n n√∫t 'B·∫£n ƒë·ªì gi√° nh√† ƒë·∫•t': {e}")

def click_dia_diem_tab(driver, adress):

    if not is_valid_address(adress):
        print(f"‚ùå ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá: {adress}")
        return None

    try:
        # X√≥a request c≈© tr∆∞·ªõc khi x·ª≠ l√Ω ƒë·ªãa ch·ªâ m·ªõi
        # clear_previous_requests(driver)
        del driver.requests


        dia_diem_tab = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, '//*[@id="TabNav-SqhSearch"]/li[2]/a'))
        )
        dia_diem_tab.click()
        # print("‚úÖ ƒê√£ nh·∫•n v√†o tab 'ƒê·ªãa ƒëi·ªÉm'")

        return enter_address(driver,adress)

    except Exception as e:
        print(f"‚ùå L·ªói khi nh·∫•n tab 'ƒê·ªãa ƒëi·ªÉm': {e}")


def enter_address(driver, address_text):


    try:
        address_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, '//*[@id="form-lat-lng"]/div/div[1]/div[3]/input'))
        )
        address_input.clear()
        address_input.send_keys(address_text)
        print(f"‚úÖ ƒê√£ nh·∫≠p ƒë·ªãa ch·ªâ: {address_text}")

        time.sleep(4)
        return select_first_address_suggestion(driver)

    except Exception as e:
        print(f"‚ùå L·ªói khi nh·∫≠p ƒë·ªãa ch·ªâ: {e}")


def is_valid_address(address_text):
    """
    Ki·ªÉm tra ƒë·ªãa ch·ªâ h·ª£p l·ªá:
    - Ph·∫£i c√≥ s·ªë nh√† (1 ho·∫∑c nhi·ªÅu s·ªë + c√≥ th·ªÉ c√≥ k√Ω t·ª± A/B/C/...) + t√™n ƒë∆∞·ªùng
    - V√† ph·∫£i c√≥ √≠t nh·∫•t m·ªôt t·ª´ kh√≥a v·ªÅ ƒë·ªãa ph∆∞∆°ng nh∆∞ ph∆∞·ªùng/qu·∫≠n/tp/t·ªânh
    """

    # Ki·ªÉm tra ph·∫ßn s·ªë nh√† + t√™n ƒë∆∞·ªùng (r·ªông h∆°n ƒë·ªÉ ch·∫•p nh·∫≠n d·∫°ng "21 + 23A", "12B-14C", v.v.)
    has_number_and_street = re.search(r'\d+[A-Za-z]*([\s\+\-\/]*\d*[A-Za-z]*)*\s+[^\d]+', address_text)

    # Ki·ªÉm tra t·ª´ kh√≥a v·ªÅ ph∆∞·ªùng/qu·∫≠n/th√†nh ph·ªë
    # has_location_info = any(
    #     keyword in address_text.lower()
    #     for keyword in ['ph∆∞·ªùng', 'p ', 'p.', 'qu·∫≠n', 'q ', 'q.', 'tp', 'tp.', 'th√†nh ph·ªë', 't·ªânh', 'hcm', 'h·ªì ch√≠ minh']
    # )

    return bool(has_number_and_street)

def select_first_address_suggestion(driver):
    try:
        # X√≥a c√°c request c≈© tr∆∞·ªõc khi click
        del driver.requests
        # ƒê·ª£i container c·ªßa danh s√°ch g·ª£i √Ω hi·ªÉn th·ªã
        suggestions_container = WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located((By.XPATH, '//*[@id="form-lat-lng"]/div/div[2]/div/div'))
        )

        # ƒê·ª£i cho ƒë·∫øn khi ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n trong danh s√°ch c√≥ text m·ªõi
        first_suggestion_xpath = '//*[@id="form-lat-lng"]/div/div[2]/div/div/div[1]'
        WebDriverWait(driver, 10).until(
            lambda d: d.find_element(By.XPATH, first_suggestion_xpath).text.strip() != ""
        )

        # L·∫•y ph·∫ßn t·ª≠ g·ª£i √Ω ƒë·∫ßu ti√™n
        first_suggestion = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, first_suggestion_xpath))
        )

        suggestion_text = first_suggestion.text.strip()

        # In g·ª£i √Ω ra ƒë·ªÉ x√°c minh
        print(f"üìç G·ª£i √Ω ƒë·∫ßu ti√™n hi·ªán t·∫°i: {suggestion_text}")

        # Click ch·ªçn ƒë·ªãa ƒëi·ªÉm
        first_suggestion.click()
        # print(f"‚úÖ ƒê√£ ch·ªçn ƒë·ªãa ƒëi·ªÉm g·ª£i √Ω ƒë·∫ßu ti√™n: {suggestion_text}")

        # ƒê·ª£i v√† l·∫•y response t·ª´ API check-plan
        coordinates = wait_for_check_plan_response(driver, timeout=10)

        if coordinates:
            return coordinates
        else:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c t·ªça ƒë·ªô t·ª´ API")
            return None

    except Exception as e:
        print(f"‚ùå L·ªói khi ch·ªçn g·ª£i √Ω ƒë·ªãa ƒëi·ªÉm ƒë·∫ßu ti√™n: {e}")
        return None



def decode_response_body(response_body, content_encoding=None):
    """
    Decode response body, x·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p n√©n (gzip, deflate)
    """
    try:
        # N·∫øu l√† bytes v√† c√≥ content-encoding
        if isinstance(response_body, bytes):
            # Ki·ªÉm tra xem c√≥ ph·∫£i gzip kh√¥ng
            if content_encoding == 'gzip' or (len(response_body) >= 2 and response_body[:2] == b'\x1f\x8b'):
                try:
                    # Decode gzip
                    with gzip.GzipFile(fileobj=io.BytesIO(response_body)) as gz:
                        return gz.read().decode('utf-8')
                except:
                    pass

            # Th·ª≠ decode b√¨nh th∆∞·ªùng
            try:
                return response_body.decode('utf-8')
            except UnicodeDecodeError:
                # Th·ª≠ c√°c encoding kh√°c
                for encoding in ['latin1', 'cp1252', 'iso-8859-1']:
                    try:
                        return response_body.decode(encoding)
                    except:
                        continue

                # N·∫øu t·∫•t c·∫£ ƒë·ªÅu fail, return d·∫°ng string v·ªõi errors='ignore'
                return response_body.decode('utf-8', errors='ignore')

        return response_body

    except Exception as e:
        print(f"‚ùå L·ªói decode response body: {e}")
        return None


def wait_for_check_plan_response(driver, timeout=15):
    """
    ƒê·ª£i v√† l·∫•y response t·ª´ API check-plan
    """
    start_time = time.time()

    while time.time() - start_time < timeout:
        # Duy·ªát qua t·∫•t c·∫£ c√°c request ƒë√£ ƒë∆∞·ª£c capture
        for request in driver.requests:
            if request.response and ('check-plan' in request.url or 'check-plan' in str(request.url)):
                try:
                    # print(f"üîç T√¨m th·∫•y request: {request.url}")
                    # print(f"üìä Response status: {request.response.status_code}")

                    # L·∫•y content-encoding header
                    content_encoding = None
                    if hasattr(request.response, 'headers'):
                        content_encoding = request.response.headers.get('content-encoding', '').lower()
                        # print(f"üì¶ Content-Encoding: {content_encoding}")

                    # ƒê·ªçc response body
                    response_body = request.response.body
                    # print(f"üìÑ Response body type: {type(response_body)}")
                    # print(f"üìè Response body length: {len(response_body) if response_body else 0}")

                    # Decode response body
                    response_text = decode_response_body(response_body, content_encoding)

                    if not response_text:
                        print("‚ùå Kh√¥ng th·ªÉ decode response body")
                        continue

                    # print(f"üìù Response text preview: {response_text[:200]}...")

                    # Parse JSON
                    response_data = json.loads(response_text)

                    # Ki·ªÉm tra xem c√≥ ch·ª©a lat/lng kh√¥ng
                    if 'data' in response_data and response_data['data']:
                        data = response_data['data']
                        if 'lat' in data and 'lng' in data:
                            lat = float(data['lat'])
                            lng = float(data['lng'])
                            print(f"‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c t·ªça ƒë·ªô t·ª´ check-plan API:")
                            print(f"   Latitude: {lat}")
                            print(f"   Longitude: {lng}")
                            print(f"   Address: {data.get('address', 'N/A')}")
                            print(f"   Full response: {response_data}")

                            return {
                                "type": "Point",
                                "coordinates": [lng, lat]  # L∆∞u √Ω: GeoJSON y√™u c·∫ßu [lng, lat]
                            }
                    else:
                        print(f"‚ö†Ô∏è Response kh√¥ng ch·ª©a lat/lng: {response_data}")

                except json.JSONDecodeError as e:
                    print(f"‚ùå L·ªói parse JSON: {e}")
                    print(f"üìù Response text: {response_text[:500] if 'response_text' in locals() else 'N/A'}")
                    continue
                except Exception as e:
                    print(f"‚ùå L·ªói khi x·ª≠ l√Ω response t·ª´ check-plan: {e}")
                    continue

        time.sleep(0.5)  # Ch·ªù 0.5 gi√¢y tr∆∞·ªõc khi check l·∫°i

    print("‚ùå Kh√¥ng t√¨m th·∫•y response t·ª´ check-plan API trong th·ªùi gian ch·ªù")

    # Debug: In ra t·∫•t c·∫£ c√°c request ƒë·ªÉ ki·ªÉm tra
    print("\nüîç Debug - T·∫•t c·∫£ c√°c request ƒë√£ capture:")
    for i, request in enumerate(driver.requests[-10:]):  # Ch·ªâ in 10 request cu·ªëi
        print(f"  {i + 1}. {request.url}")
        if request.response:
            print(f"      Status: {request.response.status_code}")

    return None


def clear_previous_requests(driver):
    """
    X√≥a c√°c request ƒë√£ capture tr∆∞·ªõc ƒë√≥.
    """
    try:
        driver.requests.clear()
        # print("üßπ ƒê√£ x√≥a t·∫•t c·∫£ c√°c request c≈©.")
    except Exception as e:
        print(f"‚ùå L·ªói khi x√≥a request: {e}")


def action_open_guland_driver():
    driver = setup_driver_address2(headless=False)

    try:
        open_guland_page_2(driver)

        while True:
            address = input("\nüîç Nh·∫≠p ƒë·ªãa ch·ªâ ƒë·ªÉ t√¨m (ho·∫∑c nh·∫≠p 'exit' ƒë·ªÉ tho√°t): ").strip()
            if address.lower() == "exit":
                break

            # Nh·∫•n l·∫°i tab ƒê·ªãa ƒëi·ªÉm
            click_dia_diem_tab(driver,address)

    except Exception as e:
        print(f"‚ùå L·ªói khi m·ªü Guland: {e}")

    finally:
        input("‚è≥ Nh·∫•n Enter ƒë·ªÉ ƒë√≥ng tr√¨nh duy·ªát...")
        driver.quit()

def main():
    action_open_guland_driver()


if __name__ == "__main__":
    main()