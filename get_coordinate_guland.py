import logging
import os
import re

from selenium.common import NoSuchElementException, ElementClickInterceptedException, ElementNotInteractableException
from seleniumwire import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import json
import io
import gzip


log_dir = "logs_status_coordinate_2025"
os.makedirs(log_dir, exist_ok=True)

# ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn file log
log_path = os.path.join(log_dir, "status_coordinate-2-2025.log")

# T·∫°o logger ri√™ng cho ·ª©ng d·ª•ng
app_logger = logging.getLogger("app_logger1")
app_logger.setLevel(logging.INFO)

# ƒê·∫£m b·∫£o logger n√†y kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi c√°c logger kh√°c
app_logger.propagate = False

address_raw = None

# Th√™m handler n·∫øu ch∆∞a c√≥
if not app_logger.handlers:
    file_handler = logging.FileHandler(log_path, mode="a", encoding="utf-8")
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(formatter)
    app_logger.addHandler(file_handler)

def setup_driver(headless=True):
    options = webdriver.ChromeOptions()
    if headless:
        options.add_argument("--headless")
    driver = webdriver.Chrome(options=options)
    driver.maximize_window()
    return driver


def open_guland_page(driver):
    driver.get("https://guland.vn/ban-do-gia")
    WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.ID, "to-thua-search")))
    time.sleep(1)  # gi·ªØ l·∫°i ch√∫t th·ªùi gian ƒë·ªÉ trang load ·ªïn ƒë·ªãnh


def fill_form(driver, so_thua, so_to, tinh, huyen, xa):
    # m·ªü l·∫°i form t·ªù th·ª≠a
    wait = WebDriverWait(driver, 5)

    # 0. Nh·∫•n m·ªü l·∫°i form "T·ªù th·ª≠a"
    try:
        to_thua_button = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="to-thua-search"]/a')))
        to_thua_button.click()
        time.sleep(1)
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ m·ªü l·∫°i form t·ªù th·ª≠a: {e}")
        return False

    # 1. X√≥a s·ªë th·ª≠a v√† s·ªë t·ªù c≈© (n·∫øu c√≥) r·ªìi nh·∫≠p m·ªõi
    input_thua = driver.find_element(By.XPATH, '//*[@id="form-to-thua"]/div[1]/div/div/div/div[2]/div/div/input[1]')
    input_to = driver.find_element(By.XPATH, '//*[@id="form-to-thua"]/div[1]/div/div/div/div[2]/div/div/input[2]')
    input_thua.clear()
    input_to.clear()
    input_thua.send_keys(so_thua)
    input_to.send_keys(so_to)

    # 2. Reset v√† ch·ªçn l·∫°i T·ªânh
    driver.find_element(By.ID, "select2-province_id_4-container").click()
    wait.until(EC.visibility_of_element_located((By.CLASS_NAME, "select2-search__field")))
    search = driver.find_element(By.CLASS_NAME, "select2-search__field")
    search.send_keys(Keys.CONTROL + "a")
    search.send_keys(Keys.BACKSPACE)
    search.send_keys(tinh)
    search.send_keys(Keys.ENTER)

    # 3. Reset v√† ch·ªçn l·∫°i Huy·ªán
    time.sleep(2)
    driver.find_element(By.ID, "select2-district_id_4-container").click()
    wait.until(EC.visibility_of_element_located((By.CLASS_NAME, "select2-search__field")))
    search = driver.find_element(By.CLASS_NAME, "select2-search__field")
    search.send_keys(Keys.CONTROL + "a")
    search.send_keys(Keys.BACKSPACE)
    search.send_keys(huyen)
    search.send_keys(Keys.ENTER)

    # 4. Reset v√† ch·ªçn l·∫°i X√£
    time.sleep(2)
    driver.find_element(By.ID, "select2-ward_id_4-container").click()
    wait.until(EC.visibility_of_element_located((By.CLASS_NAME, "select2-search__field")))
    search = driver.find_element(By.CLASS_NAME, "select2-search__field")
    search.send_keys(Keys.CONTROL + "a")
    search.send_keys(Keys.BACKSPACE)
    search.send_keys(xa)
    search.send_keys(Keys.ENTER)

    # 5. Nh·∫•n t√¨m ki·∫øm
    time.sleep(1.5)
    search_button = driver.find_element(By.XPATH, '//*[@id="TabContent-SqhSearch-3"]/div/div[2]/button')
    search_button.click()
    time.sleep(3)

    return True


def extract_coordinates_from_requests(driver):
    correct_url = "https://guland.vn/post/check-plan?screen=ban-do-gia"
    lat, lng = None, None
    polygon_points = []

    # Get only the most recent requests
    for request in driver.requests:
        if request.method == "POST" and correct_url in request.url and request.response:
            try:
                raw = request.response.body
                try:
                    decompressed = gzip.GzipFile(fileobj=io.BytesIO(raw)).read().decode("utf-8")
                except OSError:
                    decompressed = raw.decode("utf-8")

                response_data = json.loads(decompressed)

                # KI·ªÇM TRA XEM RESPONSE C√ì CH·ª®A DATA V√Ä T·ªåA ƒê·ªò KH√îNG
                if "data" in response_data and response_data["data"]:
                    data = response_data["data"]
                    if "lat" in data and "lng" in data and data["lat"] and data["lng"]:
                        lat = data["lat"]
                        lng = data["lng"]

                        print(f"‚úÖ Found parcel coordinates: lat = {lat}, lng = {lng}")
                        app_logger.info(f"‚úÖ Found parcel coordinates: lat = {lat}, lng = {lng}")

                        if "points" in data:
                            print("üß≠ Polygon boundary:")
                            polygon_points = data["points"]
                            for pt in polygon_points:
                                print(f"  {pt}")
                    else:
                        print("‚ùå Response data kh√¥ng ch·ª©a t·ªça ƒë·ªô h·ª£p l·ªá.")
                        app_logger.info("‚ùå Response data kh√¥ng ch·ª©a t·ªça ƒë·ªô h·ª£p l·ªá.")
                else:
                    print("‚ùå Response kh√¥ng ch·ª©a data h·ª£p l·ªá.")
                    app_logger.info("‚ùå Response kh√¥ng ch·ª©a data h·ª£p l·ªá.")

            except Exception as e:
                print("‚ùå Failed to parse JSON:", e)
                app_logger.info(f"‚ùå Failed to parse JSON: {e}")
            break

    if lat is None or lng is None:
        print("‚ùå Could not find coordinates.")
        app_logger.info("‚ùå Could not find coordinates.")

    return lat, lng, polygon_points


def normalize_tinh_name(tinh):
    """Chu·∫©n h√≥a t√™n t·ªânh"""
    tinh = tinh.lower().strip()
    replacements = {
        "h·ªì ch√≠ minh": "tp. h·ªì ch√≠ minh",
        "tp hcm": "tp. h·ªì ch√≠ minh",
        "tp.hcm": "tp. h·ªì ch√≠ minh",
        "tp ho chi minh": "tp. h·ªì ch√≠ minh",
        "th√†nh ph·ªë h·ªì ch√≠ minh": "tp. h·ªì ch√≠ minh",
        "ho chi minh": "tp. h·ªì ch√≠ minh",
        "hcm": "tp. h·ªì ch√≠ minh",
        ".hcm": "tp. h·ªì ch√≠ minh",
        ". hcm": "tp. h·ªì ch√≠ minh",
        ". h·ªì ch√≠ minh.": "tp. h·ªì ch√≠ minh",

        ".ct" : "c·∫ßn th∆°",
        ". ct": "c·∫ßn th∆°",
        ". c·∫ßn th∆°": "c·∫ßn th∆°",
        "ct" : "c·∫ßn th∆°",

        ". ƒë√† n·∫µng":"ƒë√† n·∫µng",
        ".ƒë√† n·∫µng": "ƒë√† n·∫µng",
        ".ƒën": "ƒë√† n·∫µng",
        ". ƒën": "ƒë√† n·∫µng"
    }
    return replacements.get(tinh, tinh)

import re

def parse_location_info(location):
    """Ph√¢n t√≠ch ƒë·ªãa ch·ªâ th√†nh c√°c th√†nh ph·∫ßn cho Guland"""
    so_thua = ""
    so_to = ""
    tinh = ""
    huyen = ""
    xa = ""

    app_logger.info(f"üìç ƒê·ªãa ch·ªâ tr∆∞·ªõc khi l·ªçc v√† chu·∫©n h√≥a: {location}")

    if location and isinstance(location, str) and location.strip():
        parts = location.split(',')
        parts = [p.strip() for p in parts if p.strip()]
        parts_lower = [p.lower() for p in parts]

        # S·ªë th·ª≠a: "Th·ª≠a ƒë·∫•t s·ªë 104", "Th·ª≠a s·ªë 104", "TƒêS 723", "Tƒê s·ªë 723"
        thuad_match = re.search(r"(?:[Tt]h·ª≠a (?:ƒë·∫•t )?s·ªë\s*|TƒêS\s*|Tƒê s·ªë\s*)(\d+)", location)
        if thuad_match:
            so_thua = thuad_match.group(1)

        # S·ªë t·ªù: "T·ªù b·∫£n ƒë·ªì 06", "T·ªù b·∫£n ƒë·ªì s·ªë 06", "TBƒê s·ªë 06", "TBƒêS 06"
        tobd_match = re.search(r"(?:[Tt]·ªù b·∫£n ƒë·ªì(?: s·ªë)?\s*|TBƒêS\s*|TBƒê s·ªë\s*)(\d+)", location)
        if tobd_match:
            so_to = tobd_match.group(1)

        # T√¨m t·ªânh/th√†nh ph·ªë t·ª´ cu·ªëi danh s√°ch parts
        for part in reversed(parts):
            part_lower = part.lower().strip()
            if any(kw in part_lower for kw in ["t·ªânh", "th√†nh ph·ªë", "tp"]):
                if not re.match(r"(ƒë∆∞·ªùng|qu·ªëc l·ªô|ql|tl|t·ªânh l·ªô)\s*\d+", part_lower):
                    tinh = re.sub(r"\b(t·ªânh|th√†nh ph·ªë|tp\.?)\b", "", part_lower).strip()
                    break

        # N·∫øu v·∫´n ch∆∞a c√≥ t·ªânh, l·∫•y ph·∫ßn cu·ªëi n·∫øu kh√¥ng ph·∫£i l√† ƒë∆∞·ªùng
        if not tinh and parts:
            last = parts[-1].lower()
            if not re.match(r"(ƒë∆∞·ªùng|qu·ªëc l·ªô|ql|tl|t·ªânh l·ªô)\s*\d+", last):
                tinh = last

        tinh = normalize_tinh_name(tinh)



        # Huy·ªán/th·ªã x√£/qu·∫≠n
        for part in parts:
            part_lower = part.lower()
            if any(kw in part_lower for kw in ["huy·ªán", "qu·∫≠n", "th·ªã x√£", "tx "]):
                huyen = part_lower.replace("tx", "th·ªã x√£").strip()
                break

        # X√£/ph∆∞·ªùng/th·ªã tr·∫•n - ∆∞u ti√™n regex ƒë·ªÉ tr√°nh d√≠nh "t·ªânh l·ªô"
        xa_match = re.search(r"\b(ph∆∞·ªùng|x√£|th·ªã tr·∫•n)\s+[a-zA-Z√Ä-·ª∏√†-·ªπ0-9\s\-]+", location, re.IGNORECASE)
        if xa_match:
            xa = xa_match.group(0).strip().lower()

        # D·ª± ph√≤ng n·∫øu v·∫´n thi·∫øu
        if not huyen and len(parts) >= 2:
            huyen = parts[-2].lower().strip()
        if not xa and len(parts) >= 3:
            xa = parts[-3].lower().strip()


    location_info = {
        "so_thua": so_thua,
        "so_to": so_to,
        "tinh": tinh,
        "huyen": huyen,
        "xa": xa
    }

    app_logger.info(f"üìç ƒê·ªãa ch·ªâ sau khi l·ªçc v√† chu·∫©n h√≥a: {location_info}")

    return {
        "so_thua": so_thua,
        "so_to": so_to,
        "tinh": tinh,
        "huyen": huyen,
        "xa": xa
    }


def interactive_loop(driver, address_info, file_path):
    print("D·ªØ li·ªáu ƒë√£ l·ªçc ƒë∆∞·ª£c:")
    print(address_info)

    # L·∫•y th√¥ng tin
    so_thua = address_info.get("so_thua", "").strip()
    so_to = address_info.get("so_to", "").strip()
    tinh = address_info.get("tinh", "").strip()
    huyen = address_info.get("huyen", "").strip()
    xa = address_info.get("xa", "").strip()

    print(so_thua, so_to, tinh, huyen, xa)
    # N·∫øu thi·∫øu b·∫•t k·ª≥ d·ªØ li·ªáu n√†o th√¨ b·ªè qua
    if not all([so_thua, so_to, tinh, huyen, xa]):
        print("‚ö†Ô∏è Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc (s·ªë th·ª≠a, s·ªë t·ªù). Chuy·ªÉn sang l·∫•y t·ªça ƒë·ªì b·∫±ng to√†n b·ªô ƒë·ªãa ch·ªâ.")
        # app_logger.info(file_path)
        #app_logger.info(address_info)
        app_logger.info("‚ö†Ô∏è Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc (s·ªë th·ª≠a, s·ªë t·ªù). Chuy·ªÉn sang l·∫•y t·ªça ƒë·ªì b·∫±ng to√†n b·ªô ƒë·ªãa ch·ªâ.")
        app_logger.info(
            f" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n")
        return None

    to_thua_button = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, '//*[@id="to-thua-search"]/a'))
    )

    try:
        # Clear existing requests before each search
        del driver.requests

        success = fill_form(driver, so_thua, so_to, tinh, huyen, xa)

        if success:
            try:
                close_button = driver.find_element("xpath", '//*[@id="Modal-Sample"]/div/div/button')
                if close_button.is_displayed():
                    print("üö´ Kh√¥ng t√¨m th·∫•y khu v·ª±c theo t·ªù th·ª≠a. ƒêang ƒë√≥ng popup...")
                    # app_logger.info(file_path)
                    ##app_logger.info(address_info)
                    app_logger.info("üö´ Kh√¥ng t√¨m th·∫•y khu v·ª±c theo t·ªù th·ª≠a. ƒêang ƒë√≥ng popup...")
                    app_logger.info(
                        f" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n")
                    close_button.click()

                    to_thua_button.click()

                    time.sleep(1)
                    return None  # sau khi ƒë√≥ng popup th√¨ b·ªè qua ƒë·ªãa ch·ªâ n√†y lu√¥n
            except NoSuchElementException:
                pass  # Kh√¥ng c√≥ popup, ti·∫øp t·ª•c nh∆∞ b√¨nh th∆∞·ªùng
            except ElementClickInterceptedException:
                print("‚ùå Kh√¥ng th·ªÉ click ƒë·ªÉ ƒë√≥ng popup.")
                return None

            # N·∫øu kh√¥ng c√≥ popup l·ªói, tr√≠ch xu·∫•t to·∫° ƒë·ªô
            lat, lng, points = extract_coordinates_from_requests(driver)

            # KI·ªÇM TRA XEM C√ì TH·∫¨T S·ª∞ L·∫§Y ƒê∆Ø·ª¢C T·ªåA ƒê·ªò KH√îNG
            if lat is not None and lng is not None:
                # app_logger.info(file_path)
                #app_logger.info(address_info)
                app_logger.info("‚úÖ L·∫•y t·ªça ƒë·ªô th√†nh c√¥ng.")
                app_logger.info(
                    f" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n")
                return {
                    "type": "Point",
                    "coordinates": [lng, lat]
                }
            else:
                print("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c t·ªça ƒë·ªô t·ª´ response.")
                # app_logger.info(file_path)
                #app_logger.info(address_info)
                app_logger.info("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c t·ªça ƒë·ªô t·ª´ response.")
                app_logger.info(
                    f" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n")

                # ƒê√ìNG T·∫§T C·∫¢ POPUP/MODAL TR∆Ø·ªöC KHI RETURN
                cleanup_popups_and_modals(driver)
                return None

        else:
            print("‚ùå Kh√¥ng th·ªÉ ƒëi·ªÅn form t√¨m ki·∫øm.")
            # app_logger.info(file_path)
            #app_logger.info(address_info)
            app_logger.info("‚ùå Kh√¥ng th·ªÉ ƒëi·ªÅn form t√¨m ki·∫øm.")
            app_logger.info(
                f" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n")

            # ƒê√ìNG T·∫§T C·∫¢ POPUP/MODAL TR∆Ø·ªöC KHI RETURN
            cleanup_popups_and_modals(driver)
            return None

    except Exception as e:
        to_thua_button.click()
        print(f"‚ùå L·ªói: {e}")
        # app_logger.info(file_path)
        #app_logger.info(address_info)
        app_logger.info(f"‚ùå L·ªói: {e}")
        app_logger.info(
            f" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n")

        # ƒê√ìNG T·∫§T C·∫¢ POPUP/MODAL TR∆Ø·ªöC KHI RETURN
        cleanup_popups_and_modals(driver)
        return None

def clean_location_names(parsed_location):
    """
    L√†m s·∫°ch ƒë·ªãa ch·ªâ:
    - Gi·ªØ l·∫°i "ph∆∞·ªùng 1", "qu·∫≠n 5" n·∫øu sau l√† s·ªë.
    - Lo·∫°i b·ªè ti·ªÅn t·ªë n·∫øu sau l√† ch·ªØ.
    - Gi·ªØ l·∫°i so_thua v√† so_to.
    """

    def remove_prefix_smart(value, prefixes, keep_if_number=True):
        if not value:
            return ""
        value = value.strip().lower()

        for prefix in prefixes:
            pattern = fr"^{prefix}[\.]?\s+(.*)$"
            match = re.match(pattern, value)
            if match:
                after = match.group(1).strip()
                if keep_if_number and re.match(r"^\d+$", after):  # Gi·ªØ nguy√™n n·∫øu sau prefix l√† s·ªë
                    return value
                else:
                    value = after
                    break

        # Xo√° d·∫•u ch·∫•m/d·∫•u ph·∫©y v√† kho·∫£ng tr·∫Øng d∆∞ ·ªü ƒë·∫ßu
        value = re.sub(r"^[\.\,\s]+", "", value)
        return value

    return {
        "so_thua": parsed_location.get("so_thua", ""),
        "so_to": parsed_location.get("so_to", ""),
        "xa": remove_prefix_smart(parsed_location.get("xa", ""), ["x√£", "ph∆∞·ªùng", "th·ªã tr·∫•n"]),
        "huyen": remove_prefix_smart(parsed_location.get("huyen", ""), ["huy·ªán", "qu·∫≠n", "th·ªã x√£", "tx", "th√†nh ph·ªë"], keep_if_number=True),
        "tinh": remove_prefix_smart(parsed_location.get("tinh", ""), ["tp", "tp.", "t·ªânh", "th√†nh ph·ªë"], keep_if_number=False)
    }

def cleanup_popups_and_modals(driver):
    """ƒê√≥ng t·∫•t c·∫£ popup v√† modal c√≥ th·ªÉ c√≤n m·ªü"""
    try:
        # Th·ª≠ ƒë√≥ng modal ch√≠nh (Modal-Sample)
        try:
            close_button = driver.find_element("xpath", '//*[@id="Modal-Sample"]/div/div/button')
            if close_button.is_displayed():
                print("üßπ ƒêang ƒë√≥ng Modal-Sample...")
                close_button.click()
                time.sleep(0.5)
        except (NoSuchElementException, ElementNotInteractableException):
            pass

        # Th·ª≠ ƒë√≥ng c√°c modal kh√°c c√≥ th·ªÉ xu·∫•t hi·ªán
        modal_selectors = [
            "//button[contains(@class, 'close') or contains(@class, 'btn-close')]",
            "//button[contains(text(), 'ƒê√≥ng') or contains(text(), 'Close') or contains(text(), '√ó')]",
            "//*[@class='modal-header']//button",
            "//*[contains(@class, 'modal')]//button[contains(@class, 'close')]"
        ]

        for selector in modal_selectors:
            try:
                buttons = driver.find_elements("xpath", selector)
                for button in buttons:
                    if button.is_displayed() and button.is_enabled():
                        print(f"üßπ ƒêang ƒë√≥ng modal v·ªõi selector: {selector}")
                        button.click()
                        time.sleep(0.3)
                        break
            except Exception:
                continue

        # Th·ª≠ nh·∫•n ESC ƒë·ªÉ ƒë√≥ng modal
        try:
            from selenium.webdriver.common.keys import Keys
            driver.find_element("tag name", "body").send_keys(Keys.ESCAPE)
            time.sleep(0.3)
        except Exception:
            pass

        # Ki·ªÉm tra xem c√≥ overlay n√†o ƒëang che m√†n h√¨nh kh√¥ng
        try:
            overlays = driver.find_elements("xpath", "//*[contains(@class, 'overlay') or contains(@class, 'backdrop')]")
            for overlay in overlays:
                if overlay.is_displayed():
                    print("üßπ ƒêang click ƒë·ªÉ ƒë√≥ng overlay...")
                    overlay.click()
                    time.sleep(0.3)
        except Exception:
            pass

        print("üßπ Ho√†n th√†nh cleanup popup/modal.")

    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi cleanup popup/modal: {e}")

def action_open_guland_driver(address, driver, file_path):
    # === Actions ===
    # driver = setup_driver(headless=True)
    address_raw = address
    try:
        # open_guland_page(driver)
        # print("‚úÖ Trang Guland ƒë√£ s·∫µn s√†ng.")

        address_parse = parse_location_info(address)

        return interactive_loop(driver,address_parse, file_path)
    except:
        print("‚ùå Fail to open Guland 2")


    # finally:
    #     driver.quit()

def main():
    action_open_guland_driver("Th·ª≠a ƒë·∫•t s·ªë 2 (pcl); 3; 193; 194, t·ªù b·∫£n ƒë·ªì s·ªë 14, ·∫•p 2/5, x√£ Long H·∫≠u, huy·ªán C·∫ßn Giu·ªôc, t·ªânh Long An"
)


if __name__ == "__main__":
    main()